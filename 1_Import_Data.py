# -*- coding: utf-8 -*-
"""
Created on Mon Feb 24 09:46:09 2025

@author: Agropilot-Project
"""

import streamlit as st
import pandas as pd
import psycopg2
import httpx
import datetime
import time
#import altair as alt
#from sqlalchemy import create_engine

url = 'https://glonassagro.com/'
username = 'rvl_testapi'
password = 'rvltestapi2024'
API = 'api/integration/v1/'
method = 'connect'
headers = {'Content-Type' : 'application/x-www-form-urlencoded'}
data = {'login' : username,
        'password' : password,
        'lang' : 'ru-ru',
        'timezone' : '0'}

@st.cache_data
def return_type (obj_name):
    import re
    #1
    passenger = ['geely', 'dokker', 'karoq', 'octavia', 'logan', 'toyota', 'mercedes', 'duster', 'renault', '–≥—Ä–∞–Ω—Ç–∞', '—É–∞–∑', 'niva', \
                 'chevrolet', 'lada', '–Ω–∏–≤–∞', 'sandero', '–ª–∞–¥–∞', '–¥–∞—Å—Ç–µ—Ä', 'accent', 'chery', 'tiggo', '–∫–∞–ª–∏–Ω–∞', \
                '–ø–∞—Ç—Ä–∏–æ—Ç', '–≤–∞–∑']
    #2
    cargo = ['–∑–∏–ª', 'next', '—Å–∞–∑', '–∫–∞–º–∞–∑', '–º–º–∑',  '–≥–∞–∑']
    #3
    bus = ['travel', 'transit']
    #4
    tractors = ['atles', '8335r', '770', '8430', '8rx', '9420', '–º—Ç–∑', '82.1', '–∫–∏—Ä–æ–≤–µ—Ü', 'yto', 'jcb', 'manitou', '—Ä—Å–º', '9110r', \
               '9410', 'T8040', 'dieci', 'gehl', '8310r']
    #5
    sprayers = ['—Ç—É–º–∞–Ω', '–±–∞—Ä—Å']
    #6
    harvesters = ['tucano', 's760', '760', 'acros', '–∞–∫—Ä–æ—Å', '—Ç–æ—Ä—É–º', '–∫–æ–º–±–∞–π–Ω', 'cs6090', 'across', 'torum']
    #7
    special = ['scorpion', '–∞—Ç–∑', 'jic','–±—É–ª—å–¥–æ–∑–µ—Ä', '–∫—Ä–∞–Ω']
    #8
    equipment = ['—Å–µ—è–ª–∫–∞']
    res = 0
    obj_name = str.lower(obj_name)
    new_s = re.sub(r"[_()]", " ", obj_name)
    if set(passenger) & set(new_s.split()):
        res = 1
    elif set(cargo) & set(new_s.split()):
        res = 2
    elif set(bus) & set(new_s.split()):
        res = 3
    elif set(tractors) & set(new_s.split()):
        res = 4
    elif set(sprayers) & set(new_s.split()):
        res = 5
    elif set(harvesters) & set(new_s.split()):
        res = 6
    elif set(special) & set(new_s.split()):
        res = 7
    elif set(equipment) & set(new_s.split()):
        res = 8
    else: res = 9
    return res

@st.cache_data
def parce_fort_json2(data):
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    flattened_data = []
    
    # –ü—Ä–æ—Ö–æ–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –æ–±—ä–µ–∫—Ç—É –≤ –¥–∞–Ω–Ω—ã—Ö
    for item in data:
        oid = item['oid']
        obj_name = item['obj_name']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–∏–æ–¥—ã —É –æ–±—ä–µ–∫—Ç–∞
        if 'periods' in item and item['periods']:  # –ï—Å–ª–∏ periods —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            # –ü—Ä–æ—Ö–æ–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–µ—Ä–∏–æ–¥—É –≤ –æ–±—ä–µ–∫—Ç–µ
            for period in item['periods']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø–µ—Ä–∏–æ–¥–µ
                if 'prms' in period and period['prms']:  # –ï—Å–ª–∏ prms —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                    period_data = {
                        'oid': oid,
                        'obj_name': obj_name,
                        'begin': period['begin'],
                        'end': period['end'],
                        'isTotal': period['isTotal'],
                        'name': period.get('name', '')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç
                    }
                    
                    # –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –±–æ–ª—å—à–µ –Ω—É–ª—è
                    has_positive_value = False
                    
                    # –ü—Ä–æ—Ö–æ–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É –≤ –ø–µ—Ä–∏–æ–¥–µ
                    for param in period['prms']:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
                        param_name = param['name']
                        param_value = param['value']
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                        try:
                            param_value_num = float(param_value)
                            if param_value_num > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±–æ–ª—å—à–µ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω—É–ª—è
                                has_positive_value = True
                        except (ValueError, TypeError):
                            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ —á–∏—Å–ª–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            pass
                        
                        period_data[param_name] = param_value
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –≤ —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –±–æ–ª—å—à–µ –Ω—É–ª—è
                    if has_positive_value:
                        flattened_data.append(period_data)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ DataFrame
    df = pd.DataFrame(flattened_data)
    return df


# –°—á–∏—Ç—ã–≤–∞–µ–º –ø–æ API —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –§–æ—Ä—Ç–∞
@st.cache_data
def loadcompanylist():
    method = 'connect'
    headers = {'Content-Type' : 'application/x-www-form-urlencoded'}
    client = httpx.Client()
    response = client.get(url+API+method, timeout=1000, headers=headers, params=data)
    sessionid = response.headers['SessionId']
    headers = {'SessionId':sessionid}
    path = 'getcompanieslist'
    resp = client.get(url+API+path, headers=headers)
    df = pd.DataFrame.from_dict(resp.json()['companies'])
    method = 'disconnect'
    response = client.get(url+API+method, timeout=1000)
    return df

#–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏
@st.cache_data
def loadobjectlist(id_company):
    method = 'connect'
    headers = {'Content-Type' : 'application/x-www-form-urlencoded'}
    client = httpx.Client()
    response = client.get(url+API+method, timeout=1000, headers=headers, params=data)
    sessionid = response.headers['SessionId']
    headers = {'SessionId':sessionid}
    path = 'getobjectslist'
    query = {'companyId': id_company}
    resp = client.get(url+API+path, headers=headers, params=query)
    df = pd.DataFrame.from_dict(resp.json()['objects'])
    method = 'disconnect'
    response = client.get(url+API+method, timeout=1000)
    return df

#–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—ä–µ–∫—Ç–∞–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
@st.cache_data
def loadobjectsstst(objects_list, start_date, stop_date):
    objects =";".join(str(element) for element in objects_list)
    method = 'connect'
    headers = {'Content-Type' : 'application/x-www-form-urlencoded'}
    params = 'dist;run_time;stop_time;idle_time;max_speed;avg_speed;motohours;start_move_time;stop_move_time;all_fuel;run_fuel;\
            idle_fuel;start_fuel_level;stop_fuel_level;fuelings;drains'
    path = 'getobjectsreport'
    client = httpx.Client()
    response = client.get(url+API+method, timeout=1000, headers=headers, params=data)
    sessionid = response.headers['SessionId']
    headers = {'SessionId':sessionid,
          'Content-Type' : 'application/json'}
    query = {'date_from': start_date,
        'date_to': stop_date,
        'objuids': objects,
        'split':'day',
        'param': params}
    resp = client.get(url+API+path, timeout=5000, headers=headers, params=query)
    obj_dict = resp.json()
    df = parce_fort_json2(obj_dict)
    method = 'disconnect'
    response = client.get(url+API+method, timeout=1000)
    return df
    

#–ó–∞–ø—Ä–∞–≤—à–∏–≤–∞–µ–º –ø–µ—Ä–µ—á–µ–Ω—å —Å–∏—Å—Ç–µ–º
@st.cache_data
def load_table_system():
    with psycopg2.connect(dbname="postgres",
                    user="postgres",
                    password="AgroPilot2025",
                    host="82.142.178.174",
                    port="5432") as conn:
        sql = "SELECT * FROM telesystems;"
        dat = pd.read_sql_query(sql, conn)
    return dat

#–°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
st.set_page_config(page_title="–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", page_icon="üìà")
st.markdown("# –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
st.sidebar.header("–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")


dictsys = load_table_system()
syslist = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É (–¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ê–ì–†–û—à—Ç—É—Ä–º–∞–Ω):",
    dictsys['system_name'],
    index=None,
)
st.write("–í—ã –≤—ã–±—Ä–∞–ª–∏ ", syslist)
if syslist != None:
    sysnum = dictsys.loc[dictsys['system_name'] == syslist, 'id_system'].item()
    st.write("–ù–æ–º–µ—Ä —Å–∏—Å—Ç–µ–º—ã: ", sysnum)
#–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –§–æ—Ä—Ç
if syslist == '–§–æ—Ä—Ç –ú–æ–Ω–∏—Ç–æ—Ä':
#—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
    df_company = loadcompanylist()
    CompanyList = st.selectbox(
       '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é (–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ API –∏–∑ —Å–∏—Å—Ç–µ–º—ã –§–æ—Ä—Ç –ú–æ–Ω–∏—Ç–æ—Ä):',
        df_company['name'].unique())
    '–í—ã –≤—ã–±—Ä–∞–ª–∏: ', CompanyList
    id_company = df_company.loc[df_company['name'] == CompanyList]['id'].item()
    st.write("ID in Fort: ", id_company)
 #–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å
    if st.checkbox('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)'):
        fullname = st.text_input('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î)')
    if st.checkbox('–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)'):
        adrcompany = st.text_input('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ)')
#–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è  
    d = st.date_input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–Ω–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:", value=None)
    now = datetime.datetime.now().date()
    if d != None:
        st.write("–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –Ω–∞—á–∏–Ω–∞—è —Å ", d, " –ø–æ ", now)
        if st.sidebar.button("–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", type="primary"):
            status_text = st.sidebar.empty()
            progress_bar = st.sidebar.progress(0)
            status_text.text("–§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ " + syslist)
            time.sleep(0.05)
            df_objects = loadobjectlist(id_company)
            progress_bar.progress(10)
            dict = df_objects['id'].to_string(index=False).split('\n')
            objects =";".join(str(element) for element in dict)
            status_text.text("–ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ " + syslist)
            df_stst = loadobjectsstst(objects, d, now)
            progress_bar.progress(20)
            status_text.text("–î–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            time.sleep(0.05)
            status_text.text("–ü—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö")
            df_objects.rename(columns={'id':'id_company', 'name':'object_name','IMEI':'imei', 
                                       'lastData':'last_date', 'direction':'reg_number'}, inplace=True)
            df_objects.drop(['groupId', 'icon', 'rotateIcon', 'iconHeight', 'iconWidth', 'lat', 'lon', 'move'], axis=1, inplace=True)
 #–ü–æ–∫–∞ —Ç–∞–∫, –ø–æ—Ç–æ–º –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–∞ ID –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ë–î
            df_objects['id_company'] = id_company
            progress_bar.progress(30)
            time.sleep(0.05)
            df_objects['id_sys'] = sysnum
            progress_bar.progress(35)
            time.sleep(0.05)
#–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            df_objects['id_type'] = df_objects.apply(lambda x: return_type(x['object_name']), axis=1)
            df_objects['reg_number'] = ''
            progress_bar.progress(45)
            time.sleep(0.05)
#–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –æ–±—ä–µ–∫—Ç–æ–≤
            drop_row_index = df_stst.loc[df_stst['isTotal']==True].index
            progress_bar.progress(50)
            time.sleep(0.05)
            df_stst.drop(drop_row_index, inplace=True)
            progress_bar.progress(60)
            time.sleep(0.05)
            df_stst['start_move_time'] = df_stst['start_move_time'].fillna(df_stst['begin'])
            df_stst['stop_move_time'] = df_stst['stop_move_time'].fillna(df_stst['end'])
            progress_bar.progress(70)
            time.sleep(0.05)
            df_stst[['start_move_time', 'stop_move_time']].fillna(df_stst[['begin', 'end']], inplace=True)
            df_stst.fillna(0, inplace=True)
            progress_bar.progress(80)
            time.sleep(0.05)
            df_stst['begin'] = pd.to_datetime(df_stst['begin'], format='%Y-%m-%d %H:%M:%S')
            df_stst['end'] = pd.to_datetime(df_stst['end'], format='%Y-%m-%d %H:%M:%S')
            df_stst['start_move_time'] = pd.to_datetime(df_stst['start_move_time'], format='%Y-%m-%d %H:%M:%S')
            df_stst['stop_move_time'] = pd.to_datetime(df_stst['stop_move_time'], format='%Y-%m-%d %H:%M:%S')
            progress_bar.progress(90)
            time.sleep(0.05)
            df_stst.rename(columns={'oid':'id_object', 'begin': 'period_begin', 'end': 'period_end', }, inplace=True)
            df_stst.drop(['obj_name', 'isTotal', 'name'], axis=1, inplace=True)
            progress_bar.progress(100)
            st.write(" ### –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤", df_objects)
            
            st.write(" ### –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤", df_stst)
