# -*- coding: utf-8 -*-
"""
Created on Mon Feb 24 09:46:09 2025

@author: Agropilot-Project
"""

import streamlit as st
import pandas as pd
import psycopg2
import httpx
import datetime
from sqlalchemy import create_engine

url = 'https://glonassagro.com/'
username = 'rvl_testapi'
password = 'rvltestapi2024'
API = 'api/integration/v1/'
data = {'login' : username,
        'password' : password,
        'lang' : 'ru-ru',
        'timezone' : '0'}

# –°—á–∏—Ç—ã–≤–∞–µ–º –ø–æ API —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –§–æ—Ä—Ç–∞
@st.cache_data
def loaddata():
    method = 'connect'
    headers = {'Content-Type' : 'application/x-www-form-urlencoded'}
    client = httpx.Client()
    response = client.get(url+API+method, timeout=1000, headers=headers, params=data)
    sessionid = response.headers['SessionId']
    headers = {'SessionId':sessionid}
    path = 'getcompanieslist'
    resp = client.get(url+API+path, headers=headers)
    df = pd.DataFrame.from_dict(resp.json()['companies'])
    method = 'disconnect'
    response = client.get(url+API+method, timeout=1000)
    return df
#–ó–∞–ø—Ä–∞–≤—à–∏–≤–∞–µ–º –ø–µ—Ä–µ—á–µ–Ω—å —Å–∏—Å—Ç–µ–º
@st.cache_data
def load_table_system():
    with psycopg2.connect(dbname="postgres",
                    user="postgres",
                    password="AgroPilot2025",
                    host="82.142.178.174",
                    port="5432") as conn:
        sql = "SELECT * FROM telesystems;"
        dat = pd.read_sql_query(sql, conn)
    return dat

#–°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
st.set_page_config(page_title="–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", page_icon="üìà")
st.markdown("# –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
st.sidebar.header("–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")


dictsys = load_table_system()
syslist = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É (–¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ê–ì–†–û—à—Ç—É—Ä–º–∞–Ω):",
    dictsys['system_name'],
    index=None,
)
st.write("–í—ã –≤—ã–±—Ä–∞–ª–∏ ", syslist)
if syslist != None:
    sysnum = dictsys.loc[dictsys['system_name'] == syslist, 'id_system'].item()
    st.write("–ù–æ–º–µ—Ä —Å–∏—Å—Ç–µ–º—ã: ", sysnum)
#–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –§–æ—Ä—Ç
if syslist == '–§–æ—Ä—Ç –ú–æ–Ω–∏—Ç–æ—Ä':
#—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
    df = loaddata()
    CompanyList = st.selectbox(
       '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é (–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ API –∏–∑ —Å–∏—Å—Ç–µ–º—ã –§–æ—Ä—Ç –ú–æ–Ω–∏—Ç–æ—Ä):',
        df['name'].unique())
    '–í—ã –≤—ã–±—Ä–∞–ª–∏: ', CompanyList
 #–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å
    if st.checkbox('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)'):
        fullname = st.text_input('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î)')
    if st.checkbox('–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)'):
        adrcompany = st.text_input('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ)')
#–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è  
    d = st.date_input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–Ω–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:", value=None)
    now = datetime.datetime.now().date()
    if d != None:
        st.write("–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –Ω–∞—á–∏–Ω–∞—è —Å ", d, " –ø–æ ", now)
        st.button("–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", type="primary")