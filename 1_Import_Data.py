# -*- coding: utf-8 -*-
"""
Created on Mon Feb 24 09:46:09 2025

@author: Agropilot-Project
"""

import streamlit as st
import pandas as pd
import psycopg2
import httpx
import datetime
from sqlalchemy import create_engine

url = 'https://glonassagro.com/'
username = 'rvl_testapi'
password = 'rvltestapi2024'
API = 'api/integration/v1/'
data = {'login' : username,
        'password' : password,
        'lang' : 'ru-ru',
        'timezone' : '0'}

@st.cache_data
def parce_fort_json2(data):
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    flattened_data = []
    
    # –ü—Ä–æ—Ö–æ–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –æ–±—ä–µ–∫—Ç—É –≤ –¥–∞–Ω–Ω—ã—Ö
    for item in data:
        oid = item['oid']
        obj_name = item['obj_name']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–∏–æ–¥—ã —É –æ–±—ä–µ–∫—Ç–∞
        if 'periods' in item and item['periods']:  # –ï—Å–ª–∏ periods —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            # –ü—Ä–æ—Ö–æ–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–µ—Ä–∏–æ–¥—É –≤ –æ–±—ä–µ–∫—Ç–µ
            for period in item['periods']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø–µ—Ä–∏–æ–¥–µ
                if 'prms' in period and period['prms']:  # –ï—Å–ª–∏ prms —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                    period_data = {
                        'oid': oid,
                        'obj_name': obj_name,
                        'begin': period['begin'],
                        'end': period['end'],
                        'isTotal': period['isTotal'],
                        'name': period.get('name', '')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç
                    }
                    
                    # –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –±–æ–ª—å—à–µ –Ω—É–ª—è
                    has_positive_value = False
                    
                    # –ü—Ä–æ—Ö–æ–¥ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É –≤ –ø–µ—Ä–∏–æ–¥–µ
                    for param in period['prms']:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
                        param_name = param['name']
                        param_value = param['value']
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                        try:
                            param_value_num = float(param_value)
                            if param_value_num > 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±–æ–ª—å—à–µ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω—É–ª—è
                                has_positive_value = True
                        except (ValueError, TypeError):
                            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ —á–∏—Å–ª–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            pass
                        
                        period_data[param_name] = param_value
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –≤ —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –±–æ–ª—å—à–µ –Ω—É–ª—è
                    if has_positive_value:
                        flattened_data.append(period_data)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ DataFrame
    df = pd.DataFrame(flattened_data)
    return df


# –°—á–∏—Ç—ã–≤–∞–µ–º –ø–æ API —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –§–æ—Ä—Ç–∞
@st.cache_data
def loaddata():
    method = 'connect'
    headers = {'Content-Type' : 'application/x-www-form-urlencoded'}
    client = httpx.Client()
    response = client.get(url+API+method, timeout=1000, headers=headers, params=data)
    sessionid = response.headers['SessionId']
    headers = {'SessionId':sessionid}
    path = 'getcompanieslist'
    resp = client.get(url+API+path, headers=headers)
    df = pd.DataFrame.from_dict(resp.json()['companies'])
    method = 'disconnect'
    response = client.get(url+API+method, timeout=1000)
    return df
#–ó–∞–ø—Ä–∞–≤—à–∏–≤–∞–µ–º –ø–µ—Ä–µ—á–µ–Ω—å —Å–∏—Å—Ç–µ–º
@st.cache_data
def load_table_system():
    with psycopg2.connect(dbname="postgres",
                    user="postgres",
                    password="AgroPilot2025",
                    host="82.142.178.174",
                    port="5432") as conn:
        sql = "SELECT * FROM telesystems;"
        dat = pd.read_sql_query(sql, conn)
    return dat

#–°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
st.set_page_config(page_title="–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", page_icon="üìà")
st.markdown("# –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
st.sidebar.header("–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")


dictsys = load_table_system()
syslist = st.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É (–¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ê–ì–†–û—à—Ç—É—Ä–º–∞–Ω):",
    dictsys['system_name'],
    index=None,
)
st.write("–í—ã –≤—ã–±—Ä–∞–ª–∏ ", syslist)
if syslist != None:
    sysnum = dictsys.loc[dictsys['system_name'] == syslist, 'id_system'].item()
    st.write("–ù–æ–º–µ—Ä —Å–∏—Å—Ç–µ–º—ã: ", sysnum)
#–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –§–æ—Ä—Ç
if syslist == '–§–æ—Ä—Ç –ú–æ–Ω–∏—Ç–æ—Ä':
#—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
    df = loaddata()
    CompanyList = st.selectbox(
       '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é (–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ API –∏–∑ —Å–∏—Å—Ç–µ–º—ã –§–æ—Ä—Ç –ú–æ–Ω–∏—Ç–æ—Ä):',
        df['name'].unique())
    '–í—ã –≤—ã–±—Ä–∞–ª–∏: ', CompanyList
 #–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å
    if st.checkbox('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)'):
        fullname = st.text_input('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î)')
    if st.checkbox('–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)'):
        adrcompany = st.text_input('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ)')
#–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è  
    d = st.date_input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–Ω–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:", value=None)
    now = datetime.datetime.now().date()
    if d != None:
        st.write("–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –Ω–∞—á–∏–Ω–∞—è —Å ", d, " –ø–æ ", now)
        st.button("–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", type="primary")